#pragma kernel NoiseMap
#include "Noise.compute"

RWStructuredBuffer<float4> points;
float3 chunkWorldPos;

int numPointsPerAxis;
int octaves;

float spacing;
float lacunarity;
float persistence;
float noiseScale;
float noiseWeight;


[numthreads(8,8,8)]
void NoiseMap (int3 id : SV_DispatchThreadID)
{
    // if id is outside the bounds of the buffer, return
    if (id.x >= numPointsPerAxis || id.y >= numPointsPerAxis || id.z >= numPointsPerAxis){
        return;
    }

    // get the index of the point in the buffer
    int index = id.z * numPointsPerAxis * numPointsPerAxis + id.y * numPointsPerAxis + id.x;

    // get the half size of the chunk
    float3 boundSize = (numPointsPerAxis - 1) * spacing;

    // get the point's position using the id
    float3 pos = id * spacing - boundSize / 2;

    // add the chunk's world position to the point's position
    float3 noiseSamplePos = pos + chunkWorldPos;

    // sample the noise function
    float noise = 0;
    float frequency = noiseScale / 100;
    float amplitude = 1;

    for (int i = 0; i < octaves; i++){
        noise += amplitude * snoise(noiseSamplePos * frequency);
        frequency *= lacunarity;
        amplitude *= persistence;
    }

    float finalDensity = noise * noiseWeight - noiseSamplePos.y;
    points[index] = float4(pos, finalDensity);
}
